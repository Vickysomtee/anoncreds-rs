name: 'Anoncreds'

env:
  CROSS_VERSION: '0.2.4'

on:
  push:
    branches: ['*']

jobs:
  build-release:
    name: Build Library

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: linux-x86_64
            target: x86_64-unknown-linux-gnu
            lib: libanoncreds.so
          - os: macos-latest
            arch: darwin-x86_64
            lib: libanoncreds.dylib
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: darwin-aarch64
            target: aarch64-apple-darwin
            lib: libanoncreds.dylib
          - os: windows-latest
            arch: windows-x86_64
            target: x86_64-pc-windows-msvc
            lib: anoncreds.dll

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v2

      - name: Build library for Windows
        if: "runner.os == 'Windows'"
        env:
          OPENSSL_STATIC: 1
        run: cargo build --release --package anoncreds --target ${{matrix.target}} --features vendored

      - name: Build library for macOS and Linux
        if: "runner.os != 'Windows'"
        run: cargo build --release --package anoncreds --target ${{matrix.target}} --features vendored

      - name: Upload library artifacts
        uses: actions/upload-artifact@v3
        with:
          name: library-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/${{ matrix.lib }}

  build-py:
    name: Build Python
    needs: [build-release]

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            library: library-linux-x86_64
            plat-name: manylinux2014_x86_64
          - os: windows-latest
            library: library-windows-x86_64
            plat-name: win_amd64
          - os: macos-latest
            library: library-darwin-x86_64
            plat-name: macosx_10_9_universal2 # macosx_10_9_x86_64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine auditwheel
      - name: Fetch library artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.library}}
          path: wrappers/python/anoncreds_test/

      - name: Build python package
        run: |
          python setup.py bdist_wheel --python-tag=py3 --plat-name=${{ matrix.plat-name }}
        working-directory: wrappers/python

      - name: Test python package
        shell: sh
        run: |
          cd wrappers/python
          pip install --upgrade pip
          pip install dist/*
          python -m demo.test
      - if: "runner.os == 'Linux'"
        name: Auditwheel
        run: auditwheel show wrappers/python/dist/*

      - name: Upload python package
        uses: actions/upload-artifact@v3
        with:
          name: python-${{ runner.os }}
          path: wrappers/python/dist/*

      - name: Publish python package
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload --repository --skip-existing testpypi wrappers/python/dist/*
